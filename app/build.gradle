/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.26.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    
    // JSON 처리를 위한 Jackson 라이브러리
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // 시스템 트레이 아이콘 지원을 위한 라이브러리
    implementation 'com.dustinredmond.fxtrayicon:FXTrayIcon:4.0.1'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 내장 웹서버 라이브러리
    implementation 'com.sun.net.httpserver:http:20070405'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.srt.App'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.srt.App'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'SRT'
    }
    jpackage {
        // installerType 'dmg', 'exe', 'msi' 중 선택
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = 'msi'
            installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            installerType = 'dmg'
            installerOptions = ['--mac-package-name', 'SRT']
        } else {
            installerType = 'deb'
            installerOptions = ['--linux-shortcut']
        }
        // 애플리케이션 정보
        appVersion = '1.0.0'
        installerName = 'SRT'
        
        // 앱 실행 설정
        jvmArgs = ['-Xmx512m']
    }
}

test {
    useJUnitPlatform()
}

// 모든 종속성이 포함된 fatJar 생성
tasks.register('fatJar', Jar) {
    manifest {
        attributes(
            'Main-Class': 'com.srt.App'
        )
    }
    
    archiveBaseName = 'srt-with-dependencies'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    from sourceSets.main.output
    
    // 설정 캐시 비활성화
    System.setProperty('org.gradle.configuration-cache', 'false')
}

// 인코딩 설정
compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// 실행 시 Java 옵션 설정
run {
    systemProperty 'file.encoding', 'UTF-8'
    systemProperty 'prism.lcdtext', 'false'
    systemProperty 'prism.text', 't2k'
    jvmArgs '-Dfile.encoding=UTF-8'
}
